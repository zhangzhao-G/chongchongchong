// Generated by gencpp from file serial_controllers/IMU_CMDRequest.msg
// DO NOT EDIT!


#ifndef SERIAL_CONTROLLERS_MESSAGE_IMU_CMDREQUEST_H
#define SERIAL_CONTROLLERS_MESSAGE_IMU_CMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_controllers
{
template <class ContainerAllocator>
struct IMU_CMDRequest_
{
  typedef IMU_CMDRequest_<ContainerAllocator> Type;

  IMU_CMDRequest_()
    : TX(false)  {
    }
  IMU_CMDRequest_(const ContainerAllocator& _alloc)
    : TX(false)  {
  (void)_alloc;
    }



   typedef uint8_t _TX_type;
  _TX_type TX;





  typedef boost::shared_ptr< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_CMDRequest_

typedef ::serial_controllers::IMU_CMDRequest_<std::allocator<void> > IMU_CMDRequest;

typedef boost::shared_ptr< ::serial_controllers::IMU_CMDRequest > IMU_CMDRequestPtr;
typedef boost::shared_ptr< ::serial_controllers::IMU_CMDRequest const> IMU_CMDRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator1> & lhs, const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator2> & rhs)
{
  return lhs.TX == rhs.TX;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator1> & lhs, const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9c64a1842fac535ff50183971167a79";
  }

  static const char* value(const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9c64a1842fac535ULL;
  static const uint64_t static_value2 = 0xff50183971167a79ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_controllers/IMU_CMDRequest";
  }

  static const char* value(const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool TX\n"
;
  }

  static const char* value(const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TX);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_CMDRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_controllers::IMU_CMDRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_controllers::IMU_CMDRequest_<ContainerAllocator>& v)
  {
    s << indent << "TX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TX);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_CONTROLLERS_MESSAGE_IMU_CMDREQUEST_H
